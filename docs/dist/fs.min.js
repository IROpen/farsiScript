(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
FS = require('../index.js');
//browserify main.js -o fs.min.js
//node-minify -c butternut -i fs.min.js -o fs.min.js

},{"../index.js":5}],2:[function(require,module,exports){
var tinynlp=function(){function m(a){this.lhsToRhsList={};for(var c in a){var b=a[c].split("->"),d=b[0].trim(),b=b[1].trim().split("|");this.lhsToRhsList[d]||(this.lhsToRhsList[d]=[]);for(var e in b)this.lhsToRhsList[d].push(b[e].trim().split(" "))}}function h(a){this.idToState={};this.currentId=0;this.chart=[];for(var c=0;c<a.length+1;c++)this.chart[c]=[]}function g(a,c,b,d,e){this.lhs=a;this.rhs=c;this.dot=b;this.left=d;this.right=e;this.id=-1;this.ref=[];for(a=0;a<c.length;a++)this.ref[a]={}}function n(a,
c,b,d){if(c==a.length)d.push(b.slice());else if(0==a[c].length)n(a,c+1,b,d);else for(var e in a[c])if(0==b.length||b[b.length-1].right==a[c][e].left)b.push(a[c][e]),n(a,c+1,b,d),b.pop()}m.prototype.terminalSymbols=function(a){return[]};m.prototype.getRightHandSides=function(a){return(a=this.lhsToRhsList[a])?a:null};m.prototype.isEpsilonProduction=function(a){return"_EPSILON_"==a};loggingOn=0;h.prototype.addToChart=function(a,c){a.setId(this.currentId);var b=this.chart[c],d;for(d in b){var e=b[d];
if(a.equals(e))return b=!1,b=e.appendRefsToChidStates(a.getRefsToChidStates())}b.push(a);this.idToState[this.currentId]=a;this.currentId++;return!0};h.prototype.getStatesInColumn=function(a){return this.chart[a]};h.prototype.countStatesInColumn=function(a){return this.chart[a].length};h.prototype.getState=function(a){return this.idToState[a]};h.prototype.getFinishedRoot=function(a){var c=this.chart[this.chart.length-1],b;for(b in c){var d=c[b];if(d.complete()&&d.getLeftHandSide()==a)return d}return null};
h.prototype.log=function(a){if(loggingOn){console.log("-------------------");console.log("Column: "+a);console.log("-------------------");for(var c in this.chart[a])console.log(this.chart[a][c].toString())}};g.prototype.complete=function(){return this.dot>=this.rhs.length};g.prototype.toString=function(){var a=[];a.push("(id: "+this.id+")");a.push(this.lhs);a.push("\u2192");for(var c=0;c<this.rhs.length;c++)c==this.dot&&a.push("\u2022"),a.push(this.rhs[c]);this.complete()&&a.push("\u2022");a.push("["+
this.left+", "+this.right+"]");a.push(JSON.stringify(this.ref));return a.join(" ")};g.prototype.expectedNonTerminal=function(a){return null!==a.getRightHandSides(this.rhs[this.dot])?!0:!1};g.prototype.setId=function(a){this.id=a};g.prototype.getId=function(){return this.id};g.prototype.equals=function(a){return this.lhs===a.lhs&&this.dot===a.dot&&this.left===a.left&&this.right===a.right&&JSON.stringify(this.rhs)===JSON.stringify(a.rhs)?!0:!1};g.prototype.getRefsToChidStates=function(){return this.ref};
g.prototype.appendRefsToChidStates=function(a){for(var c=!1,b=0;b<a.length;b++)if(a[b])for(var d in a[b])this.ref[b][d]!=a[b][d]&&(c=!0),this.ref[b][d]=a[b][d];return c};g.prototype.predictor=function(a,c){var b=this.rhs[this.dot],d=a.getRightHandSides(b),e=!1,f;for(f in d){for(var k=d[f],h=0;k&&h<k.length&&a.isEpsilonProduction(k[h]);)h++;k=new g(b,k,h,this.right,this.right);e|=c.addToChart(k,this.right)}return e};g.prototype.scanner=function(a,c,b){var d=this.rhs[this.dot],e=!1;(a=b?a.terminalSymbols(b):
[])||(a=[]);a.push(b);for(var f in a)if(d==a[f]){b=new g(d,[b],1,this.right,this.right+1);e|=c.addToChart(b,this.right+1);break}return e};g.prototype.completer=function(a,c){var b=!1,d=c.getStatesInColumn(this.left),e;for(e in d){var f=d[e];if(f.rhs[f.dot]==this.lhs){for(var k=f.dot+1;f.rhs&&k<f.rhs.length&&a.isEpsilonProduction(f.rhs[k]);)k++;k=new g(f.lhs,f.rhs,k,f.left,this.right);k.appendRefsToChidStates(f.ref);var h=Array(f.rhs.length);h[f.dot]={};h[f.dot][this.id]=this;k.appendRefsToChidStates(h);
b|=c.addToChart(k,this.right)}}return b};g.prototype.traverse=function(){if(1==this.ref.length&&0==Object.keys(this.ref[0]).length){var a=[];this.lhs!=this.rhs&&a.push({root:this.rhs,left:this.left,right:this.right});return[{root:this.lhs,left:this.left,right:this.right,subtrees:a}]}for(var c=[],a=0;a<this.ref.length;a++){c[a]=[];for(var b in this.ref[a])c[a]=c[a].concat(this.ref[a][b].traverse())}b=[];n(c,0,[],b);c=[];for(a in b)c.push({root:this.lhs,left:this.left,right:this.right,subtrees:b[a]});
return c};g.prototype.getLeftHandSide=function(){return this.lhs};var l={};l.Grammar=m;l.State=g;l.Chart=h;l.parse=function(a,c,b){var d=new h(a),e=c.getRightHandSides(b),f;for(f in e){var k=new g(b,e[f],0,0,0);d.addToChart(k,0)}for(f=0;f<a.length+1;f++){for(b=!0;b;)for(b=!1,j=0;j<d.countStatesInColumn(f);)e=d.getStatesInColumn(f)[j],b=e.complete()?b|e.completer(c,d):e.expectedNonTerminal(c)?b|e.predictor(c,d):b|e.scanner(c,d,a[f]),j++;d.log(f)}return d};l.logging=function(a){loggingOn=a};return l}();
module.exports = tinynlp;

},{}],3:[function(require,module,exports){
const tinynlp = require('./earley-parser.js');

wordlist = new Map([
    ['است','ast'],
    ['.','noghte'],
    ['?','alamat_soal'],
    ['(','parantez_baz'],
    [')','parantez_baste'],
    ['،','virgool'],
    ['؟','alamat_soal'],
    ['چیست','chist'],
    ['نوعی','noyi'],
    ['در','harfe_ezafe'],
    ['با','harfe_ezafe'],
    ['هر','har'],
    ['کن','kon'],
    ['را','ra'],
    ['سپس','sepas'],
    ['یعنی','yani'],
]);


fsg = new tinynlp.Grammar([
    'root -> assign noghte | func_assign noghte | ask alamat_soal | cmd noghte | cmd_assign noghte',
    'cmd_root -> cmd',
    'cmd -> cmd_tak | cmd_tak sepas cmd',
    'cmd_tak -> eval_task ra esm kon | eval_task ra eval_motam_list esm kon | eval_motam_list esm kon | esm kon',
    'assign -> esm eval_task ast | esm virgool eval_task ast' ,
    'func_assign -> esm input virgool eval_task ast | esm input eval_motam_list virgool eval_task ast',
    'input -> eval_task | har esm' ,
    'eval_task -> noyi esm | parantez_baz eval_task parantez_baste | num | esm | obj | esm eval_task | esm eval_task eval_motam_list' ,
    'eval_motam_list -> eval_motam_list eval_motamam | eval_motamam',
    'eval_motamam -> harfe_ezafe eval_task',
    'ask -> eval_task chist' ,
    'cmd_assign -> esm kon yani cmd',
]);
fsg.terminalSymbols = function(token){
    if (wordlist.has(token)){
        let op = wordlist.get(token);
        if (typeof op == 'string')
            return [op];
        else
            return op;
    }
    if( token.match(/^\d+$/) ) return ['num'];
    if (token[0] == '"' || token[0] == '{' || token[0] == '[') return ['obj'];
    return ['esm'];
}

function parseArabic(str) {
    return str.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function(d) {
        return d.charCodeAt(0) - 1632; // Convert Arabic numbers
    }).replace(/[۰۱۲۳۴۵۶۷۸۹]/g, function(d) {
        return d.charCodeAt(0) - 1776; // Convert Persian numbers
    });
}

function tokenize(text){
    var qd=0,bd=0;
    text = text.replace(x=>(x=='\n'?' ':x)).split('');
    for(let i=0;i<text.length;i++){
	let c = text[i];
	if (c=='"') qd^=1;
	if (c=='{' || c=='[') bd++;
	if (c=='}' || c==']') bd--;
	if (c==' ' && bd==0 && qd==0) text[i]='\n';
    }
    return text.join('').split('\n').filter(Boolean);
}

function fparse(text,rootRule = 'root'){
    text=tokenize(parseArabic(text));
    //console.log(text);
    let chart = tinynlp.parse(text, fsg, rootRule);
    let trees = chart.getFinishedRoot(rootRule).traverse();                
    return trees;
}

module.exports = fparse;


},{"./earley-parser.js":2}],4:[function(require,module,exports){
FSI = {
    defs:{
	funcf:(fname,param,motamam)=>{
	    if (param == undefined){
		return fname;
	    }
	    return (fname+' '+param);
	}
    },
    varlist : new Map([]),
    funclist : new Map([
    ['منفی' , 
    [ function(param,motamam){ return - param ; } ] ],
    ['جمع' , 
    [ function(param,motamam){ return param+motamam[0].value ; } ] ],
    ['ضرب' , 
    [ function(param,motamam){ return param*motamam[0].value ; } ] ],    
    ]),
    
    typelist : new Map([
    ['چیز' , 
    {par:'چیز' , members:[] } ],
    ['میوه' , 
    {par:'چیز' , members:[] } ],
    ['انسان' , 
    {par:'چیز' , members:[] } ],
    ]),

    tasklist : new Map([
	['صبر' , 
	 async function(param,motamam){
	     const delay = function (ms){
		 return new Promise(resolve=>{
		     setTimeout(resolve,ms)
		 });
	     }
	     await delay(param);
	 } ],
	
    ]),
    
    
    ClassicType : function(id,tpn){
        this.id = id;
        this.type = tpn;
        this.toString = () => (this.type+'('+this.id+')');
    },
        
    matchMotamam : function(moa,mob){
        if (moa.length != mob.length) return false;
        for (let i = moa.length - 1 ; i>=0 ; i--){
            if ('value' in moa[i] && 'value' in mob[i] && mob[i].value != moa[i].value){
                return false;
            }
        }
        return true;
    },
    evlMotamamList : async function(tr){
        if (tr.subtrees.length == 1){
            let ts = tr.subtrees[0];
            return [ { harfeEzafe : ts.subtrees[0].subtrees[0].root[0] , value : await FSI.evl(ts.subtrees[1])  } ];
        }
    },
    runFunc : async function(fname,param,motamam){
	if (motamam == undefined) motamam = [];
	const func = FSI.funclist.get(fname);
        if (func == undefined) return await FSI.defs.funcf(fname,param,motamam);
        for (let i = func.length - 1;i>=0;i--){
            let jav = await func[i](param,motamam);
	    //console.log(jav);
	    if (jav != undefined ) return jav;
        }
        return await FSI.defs.funcf(fname,param,motamam);
    },
    evl : async function f(tr){
        if (tr.root == 'I') return tr.I;
        if (tr.subtrees[0].root == 'parantez_baz'){
            return await f(tr.subtrees[1]);
        }
        if (tr.subtrees[0].root == 'noyi'){
            const tpn = tr.subtrees[1].subtrees[0].root[0];
            if (!FSI.typelist.has(tpn)){
                return undefined;
            }
            const tp = FSI.typelist.get(tpn);
            const tyo = new FSI.ClassicType(tp.members.length,tpn);
            tp.members.push(tyo);
            return tyo;
        }        
        if (tr.subtrees.length == 1){
            let ts = tr.subtrees[0];
            if (ts.root == 'obj'){
                return JSON.parse(ts.subtrees[0].root[0]);
            }
            if (ts.root == 'num'){
                return Number(ts.subtrees[0].root);
            }
            if (ts.root == 'esm'){
		let func = ts.subtrees[0].root[0];
		return FSI.runFunc(func);
	    }
        }
        if (tr.subtrees.length == 2){
            let ts = tr.subtrees[0];
            if (ts.root == 'esm'){
                let param = await f(tr.subtrees[1]);
                let func = ts.subtrees[0].root[0];
                //console.log(func);
                //console.log(FSI.funclist.get(func));
                return FSI.runFunc(func,param);
            }
        }
        if (tr.subtrees.length == 3){
            let ts = tr.subtrees[0];
            if (ts.root == 'esm'){
                let param = await f(tr.subtrees[1]);
                let motamam = await FSI.evlMotamamList(tr.subtrees[2]);
                let func = ts.subtrees[0].root[0];
                //console.log(func);
                //console.log(FSI.funclist.get(func));
                return FSI.runFunc(func,param,motamam);
            }
        }
    },
    evl_with_dic : async function (tr,dic){
        dic.forEach((val,funcname)=>{
	    //console.log(funcname,val);
	    if (!FSI.funclist.has(funcname)) FSI.funclist.set(funcname,[]);
	    FSI.funclist.get(funcname).push((param,motamam)=>{ if (param==undefined) return val; });
	});
        let retval = await FSI.evl(tr);
        dic.forEach((x,y)=>FSI.funclist.get(y).pop());
        return retval;
    },
    treeToText : function f(tr){
        if (!tr.subtrees || tr.subtrees.length == 0){
            return tr.root;
        }
        return tr.subtrees.map(f).join(' ');
    },
    evlCmdTak : async function (tr){
	if (tr.subtrees.length == 2){
	    //const param = await FSI.evl(tr.subtrees[0]);
	    const nam = tr.subtrees[0].subtrees[0].root[0];
	    const task = FSI.tasklist.get(nam);
	    await task(undefined,[]);
	    return;
	}
	if (tr.subtrees.length == 3){
	    const motam = await FSI.evlMotamamList(tr.subtrees[0]);
	    const nam = tr.subtrees[1].subtrees[0].root[0];
	    const task = FSI.tasklist.get(nam);
	    await task(undefined,motam);
	    return;
	}
	if (tr.subtrees.length == 4){
	    const param = await FSI.evl(tr.subtrees[0]);
	    const nam = tr.subtrees[2].subtrees[0].root[0];
	    const task = FSI.tasklist.get(nam);
	    //console.log(nam,task,FSI.tasklist);
	    await task(param,[]);
	    return;
	}
	if (tr.subtrees.length == 5){
	    const param = await FSI.evl(tr.subtrees[0]);
	    const motam = await FSI.evlMotamamList(tr.subtrees[2]);
	    const nam = tr.subtrees[3].subtrees[0].root[0];
	    const task = FSI.tasklist.get(nam);
	    //console.log(param,motam);
	    await task(param,motam);
	    return;
	}
    },
    evlCmd : async function(tr){
	if (tr.subtrees.length == 1){
	    return await FSI.evlCmdTak(tr.subtrees[0]);
	}
	if (tr.subtrees.length == 3){
	    await FSI.evlCmdTak(tr.subtrees[0]);
	    return await FSI.evlCmd(tr.subtrees[2]);
	}
    },
    run : async function (tr){
        let ts = tr.subtrees[0];
	if (ts.root == 'cmd'){
	    FSI.evlCmd(ts);
	    return "در حال انجام است .";
	}
	if (ts.root == 'ask'){
            let val = await FSI.evl(ts.subtrees[0]);
            return FSI.treeToText(ts.subtrees[0])+" ، "+val+" است .";
        }
        if (ts.root == 'assign'){
            let funcname = ts.subtrees.find(x=>(x.root == "esm")).subtrees[0].root[0];
            let val = await FSI.evl(ts.subtrees.find(x=>(x.root == "eval_task")));
            if (!FSI.funclist.has(funcname)) FSI.funclist.set(funcname,[]);
	    FSI.funclist.get(funcname).push((param,motamam)=>{ if (param==undefined) return val; });
	    return "فهمیدم .";
        }
	if (ts.root == 'cmd_assign'){
	    if (ts.subtrees.length == 4){
		let esm = ts.subtrees[0].subtrees[0].root[0];
		FSI.tasklist.set(esm,async () => (await FSI.evlCmd(ts.subtrees[3])));
	    }
	    return 'فهمیدم .';
	}
        if (ts.root == 'func_assign'){
            let funcname = ts.subtrees[0].subtrees[0].root[0];
            if (!FSI.funclist.has(funcname)) FSI.funclist.set(funcname,[]);
            let trp = ts.subtrees[1].subtrees[0];
            let mymotamam = [];
            let rulf = ts.subtrees[ts.subtrees.length - 2];
            //console.log(rulf);
            if (rulf.subtrees[0].root == 'noyi') rulf = {root:"I",I:FSI.evl(rulf)};
            //console.log(rulf);
            if (ts.subtrees[2].root != 'virgool'){
                mymotamam = FSI.evlMotamamList(ts.subtrees[2]);
            }
            if (trp.root == 'eval_task'){
                let myparam = await FSI.evl(trp);
                FSI.funclist.get(funcname).push( async function (param,motamam){
                    if (param == myparam && FSI.matchMotamam(motamam,mymotamam)){
                        return await FSI.evl(rulf);
                    }    
                    return undefined;
                }
                );
                return "فهمیدم .";
            } 
            if (trp.root == 'har'){
                FSI.funclist.get(funcname).push( async function (param,motamam){
                    if (FSI.matchMotamam(motamam,mymotamam)){
                        return await FSI.evl_with_dic(rulf,new Map([["او",param]]));
                    }    
                    return undefined;
                }
                );
                return "فهمیدم .";
            }
        }
    }, 
};

module.exports = FSI;

},{}],5:[function(require,module,exports){
const FSI = require('./fsinterpreter');
const fparse = require('./fsgrammar');

FSI.tasklist.set('اجرا',async function(param,motamam){
    try{
	const tr = fparse(param,'cmd_root')[0].subtrees[0];
	if (motamam.length == 0){
	    return await FSI.evlCmd(tr);
	}
	if (motamam[0].harfeEzafe == 'با'){
	    var i = motamam[0].value;
	    while(i--){
		await FSI.evlCmd(tr);
		//console.log("runed ",param);
	    }
	}
    }catch(e){
	return;
    }
});

module.exports = {
    eval : async x => {
	try{
	    const tr = fparse(x)[0];
	    return await FSI.run(tr);
	}catch(e){
	    //console.log(e);
	    return "متوجه نشدم .";
	}
    },
    FSI : FSI,
    fparse : fparse,
};

},{"./fsgrammar":3,"./fsinterpreter":4}]},{},[1]);
